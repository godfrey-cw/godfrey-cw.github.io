<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-03-12T11:34:51-05:00</updated><id>/feed.xml</id><title type="html">Charlie Godfrey</title><subtitle>Home Page
</subtitle><entry><title type="html">Plotting Surface Deformations with Julia</title><link href="/2020/07/13/plotting-surface-deformations-with-julia.html" rel="alternate" type="text/html" title="Plotting Surface Deformations with Julia" /><published>2020-07-13T14:17:00-05:00</published><updated>2020-07-13T14:17:00-05:00</updated><id>/2020/07/13/plotting-surface-deformations-with-julia</id><content type="html" xml:base="/2020/07/13/plotting-surface-deformations-with-julia.html"><![CDATA[<p>This notebook shows how to use the <code class="language-plaintext highlighter-rouge">Plots.jl</code> Julia package to generate <code class="language-plaintext highlighter-rouge">.gifs</code>
of deformations of surfaces in \(\mathbb{R}^3\).</p>

<p>You can download the notebook itself <a href="/assets/notebooks/SurfaceDefos.ipynb">here</a>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># use Plots and LinearAlgebra</span>
<span class="k">using</span> <span class="n">LinearAlgebra</span>
<span class="k">using</span> <span class="n">Plots</span>
</code></pre></div></div>

<h1 id="plotting-surfaces">Plotting surfaces</h1>
<p>Here we define a function <code class="language-plaintext highlighter-rouge">surf_plot</code> which takes as input arrays <code class="language-plaintext highlighter-rouge">X, Y</code> and a function (or array of functions) <code class="language-plaintext highlighter-rouge">f</code> and plots them.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> surf_plot</span><span class="x">(</span><span class="n">X</span><span class="x">,</span> <span class="n">Y</span><span class="x">,</span> <span class="n">f</span><span class="x">,</span> <span class="n">z_lim</span><span class="x">)</span>
    <span class="n">Z</span> <span class="o">=</span> <span class="n">map</span><span class="x">(</span><span class="n">f</span><span class="x">[</span><span class="mi">1</span><span class="x">],</span> <span class="n">X</span><span class="x">,</span> <span class="n">Y</span><span class="x">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">X</span><span class="x">[</span><span class="mi">1</span><span class="x">,</span> <span class="o">:</span><span class="x">]</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">Y</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="mi">1</span><span class="x">]</span>
    <span class="n">surface</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">Z</span><span class="x">,</span> <span class="n">framestyle</span> <span class="o">=</span> <span class="o">:</span><span class="n">zerolines</span><span class="x">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">2</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">f</span><span class="x">)</span>
        <span class="n">Z</span> <span class="o">=</span> <span class="n">map</span><span class="x">(</span><span class="n">f</span><span class="x">[</span><span class="n">i</span><span class="x">],</span> <span class="n">X</span><span class="x">,</span> <span class="n">Y</span><span class="x">)</span>
        <span class="n">surface!</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">Z</span><span class="x">,</span> <span class="n">framestyle</span> <span class="o">=</span> <span class="o">:</span><span class="n">zerolines</span><span class="x">)</span>
    <span class="k">end</span>
    <span class="n">xlabel!</span><span class="x">(</span><span class="s">"x"</span><span class="x">)</span>
    <span class="n">ylabel!</span><span class="x">(</span><span class="s">"y"</span><span class="x">)</span>
    <span class="n">xlims!</span><span class="x">(</span><span class="n">x</span><span class="x">[</span><span class="mi">1</span><span class="x">],</span> <span class="n">x</span><span class="x">[</span><span class="n">length</span><span class="x">(</span><span class="n">x</span><span class="x">)])</span>
    <span class="n">ylims!</span><span class="x">(</span><span class="n">y</span><span class="x">[</span><span class="mi">1</span><span class="x">],</span> <span class="n">y</span><span class="x">[</span><span class="n">length</span><span class="x">(</span><span class="n">y</span><span class="x">)])</span>
    <span class="n">zlims!</span><span class="x">(</span><span class="n">z_lim</span><span class="x">[</span><span class="mi">1</span><span class="x">],</span> <span class="n">z_lim</span><span class="x">[</span><span class="mi">2</span><span class="x">])</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>surf_plot (generic function with 2 methods)
</code></pre></div></div>

<h1 id="generating-gifs">Generating <code class="language-plaintext highlighter-rouge">.gifs</code></h1>
<p>Now we use <code class="language-plaintext highlighter-rouge">Plots.jl</code>’s handy <code class="language-plaintext highlighter-rouge">@gif</code>. We’ll encode a surface deformation as a parameterized family of functions \(f(x, y, c)\), encoded as a function \(h \colon \mathbb{R} \to \mathrm{Functions}(\mathbb{R}^2, \mathbb{R})\) taking \(c \mapsto f(x, y, c)\).</p>

<p>To prevend the \(z\) limits from jumping around, we compute their max and min values.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> surf_defo</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">h</span><span class="x">,</span> <span class="n">c</span><span class="x">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">ones</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">y</span><span class="x">))</span><span class="o">*</span><span class="n">transpose</span><span class="x">(</span><span class="n">x</span><span class="x">)</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">y</span><span class="o">*</span><span class="n">transpose</span><span class="x">(</span><span class="n">ones</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">x</span><span class="x">)))</span>
    
    <span class="n">zmin</span> <span class="o">=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">c</span><span class="x">))</span>
    <span class="n">zmax</span> <span class="o">=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">c</span><span class="x">))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">c</span><span class="x">)</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">h</span><span class="x">(</span><span class="n">c</span><span class="x">[</span><span class="n">i</span><span class="x">])</span>
        <span class="n">Z</span> <span class="o">=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">y</span><span class="x">),</span> <span class="n">length</span><span class="x">(</span><span class="n">x</span><span class="x">),</span> <span class="n">length</span><span class="x">(</span><span class="n">f</span><span class="x">))</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">f</span><span class="x">)</span>
        <span class="n">Z</span><span class="x">[</span><span class="o">:</span><span class="x">,</span> <span class="o">:</span><span class="x">,</span> <span class="n">j</span><span class="x">]</span> <span class="o">=</span> <span class="n">map</span><span class="x">(</span><span class="n">f</span><span class="x">[</span><span class="n">j</span><span class="x">],</span> <span class="n">X</span><span class="x">,</span> <span class="n">Y</span><span class="x">)</span>
        <span class="k">end</span>
        <span class="n">zmin</span><span class="x">[</span><span class="n">i</span><span class="x">]</span> <span class="o">=</span> <span class="n">minimum</span><span class="x">(</span><span class="n">Z</span><span class="x">)</span>
        <span class="n">zmax</span><span class="x">[</span><span class="n">i</span><span class="x">]</span> <span class="o">=</span> <span class="n">maximum</span><span class="x">(</span><span class="n">Z</span><span class="x">)</span>
    <span class="k">end</span>
    <span class="n">z_lim</span> <span class="o">=</span> <span class="x">[</span><span class="n">minimum</span><span class="x">(</span><span class="n">zmin</span><span class="x">),</span> <span class="n">maximum</span><span class="x">(</span><span class="n">zmax</span><span class="x">)]</span>
    
    <span class="nd">@gif</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">c</span><span class="x">)</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">h</span><span class="x">(</span><span class="n">c</span><span class="x">[</span><span class="n">i</span><span class="x">])</span>
        <span class="n">surf_plot</span><span class="x">(</span><span class="n">X</span><span class="x">,</span> <span class="n">Y</span><span class="x">,</span> <span class="n">f</span><span class="x">,</span> <span class="n">z_lim</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span> 
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>surf_defo (generic function with 1 method)
</code></pre></div></div>

<h1 id="writing-down-a-deformation">Writing down a deformation</h1>
<p>Here’s an example of the deformation \(z^2 - \frac{x^2}{4} - \frac{y^2}{9} = c\) for \(c \in [-1, 1]\).</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> cone</span><span class="x">(</span><span class="n">c</span><span class="x">)</span>
    <span class="k">function</span><span class="nf"> fp</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="x">)</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">9</span><span class="x">)</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">0</span>
            <span class="k">return</span> <span class="nb">NaN</span>
            <span class="k">else</span> <span class="k">return</span> <span class="n">sqrt</span><span class="x">(</span><span class="n">c</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="x">)</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="x">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">9</span><span class="x">)</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span><span class="x">)</span>
        <span class="k">end</span>
    <span class="k">end</span>
    <span class="n">fm</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span> <span class="o">=</span> <span class="o">-</span><span class="n">fp</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
    <span class="k">return</span> <span class="x">[</span><span class="n">fp</span><span class="x">,</span> <span class="n">fm</span><span class="x">]</span>
<span class="k">end</span>        
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cone (generic function with 1 method)
</code></pre></div></div>

<h1 id="rendering-a-deformation">Rendering a deformation</h1>
<p>Here we finally run the above functions. For best results a very fine \(xy\) grid is used … this might take a while.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="o">:</span><span class="mf">0.001</span><span class="o">:</span><span class="mi">3</span>
<span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="o">:</span><span class="mf">0.001</span><span class="o">:</span><span class="mi">3</span>
<span class="n">c</span> <span class="o">=</span> <span class="x">[</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">0.01</span><span class="o">:</span><span class="mi">0</span><span class="x">;</span> <span class="n">zeros</span><span class="x">(</span><span class="mi">10</span><span class="x">);</span> <span class="mi">0</span><span class="o">:</span><span class="mf">0.01</span><span class="o">:</span><span class="mi">1</span><span class="x">]</span>
<span class="n">surf_defo</span><span class="x">(</span><span class="n">x</span><span class="x">,</span> <span class="n">y</span><span class="x">,</span> <span class="n">cone</span><span class="x">,</span> <span class="n">c</span><span class="x">)</span>
</code></pre></div></div>

<p><img src="/assets/images/1sheet2sheets.gif" alt="Deforming a hyperboloid through a cone" title="Deforming a hyperboloid" /></p>]]></content><author><name></name></author><category term="teaching" /><summary type="html"><![CDATA[This notebook shows how to use the Plots.jl Julia package to generate .gifs of deformations of surfaces in \(\mathbb{R}^3\).]]></summary></entry></feed>